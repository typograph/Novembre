//
// Copyright 2006 Timofey <typograph@elec.ru>
//
// This file is part of Novembre utility library.
//
// Novembre utility library is free software: you can redistribute it
// and/or modify it  under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation, either version 2
// of the License, or (at your option) any later version.
//
// Novembre is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//


#ifndef NVBPAGEVIEWMODEL_H
#define NVBPAGEVIEWMODEL_H

#include <QAbstractListModel>
#include "NVBGeneralDelegate.h"
#include "NVBViewController.h"
#ifndef FILEGENERATOR_NO_GUI
#include "NVBIconProvider.h"
#else
class NVBIconProvider;
#endif
#include "NVBMimeData.h"

class NVBFile;

/*!
 * NVBPageModel is a list model that delivers pages as list elements.
 * It returns QIcon generated by default icon delegates as Qt::DecorationRole,
 * and page name as Qt::DisplayRole.
 *
 * NVBPageModel supports drag'n'drop mechanisms and will accept pages dropped
 * from itself and other models.
 */
class NVBPageViewModel : public QAbstractListModel {
		Q_OBJECT
	private:
		/// Position at which last addSource succeeded
		int lastAddedRow;
		/// common file
		const NVBFile * common;
	protected:
		/// Icon provider to use for icons
		NVBIconProvider * iconProvider;
		/// Cached icons for all pages
		QList<QIcon> icons;
		/// The pages in the model
		QList<NVBDataSource*> pages;
		/// Helper function that extracts information for @p role from @p page
		virtual QVariant pageData(NVBDataSource* page, int role) const;
	public:
		/// Construct an empty model
		NVBPageViewModel();
		virtual ~NVBPageViewModel();

		/// Number of pages in the model
		virtual int rowCount(const QModelIndex & parent = QModelIndex()) const;
		/// Return information about page at @p index
		virtual QVariant data(const QModelIndex & index, int role = Qt::DisplayRole) const;
		/// Replace model pages
		virtual bool setData(const QModelIndex & index, const QVariant & value, int role = Qt::EditRole);

		virtual Qt::ItemFlags flags(const QModelIndex & index) const;
		/// Remove page at @p row
		virtual bool removeRow(int row, const QModelIndex & parent = QModelIndex());

		/// Mime data representing one page
		virtual QMimeData * mimeData(const QModelIndexList & indexes) const;
		/// Support copy and move
		virtual Qt::DropActions supportedDropActions() const;

		virtual QStringList mimeTypes() const;
		virtual bool dropMimeData(const QMimeData * data, Qt::DropAction action, int row, int column, const QModelIndex & parent);

		/// Remove all pages from the model
		void clear();

		/// View type is NVB::IconView
		virtual NVB::ViewType viewType() { return NVB::IconView; }

		/// Adds a \a page to the top of the stack
		int addSource(NVBDataSource * page);
		/// Inserts \a page at position \a row
		void addSource(NVBDataSource * page, int row);
		/// Inserts a page at \a index from another model
		void addSource(const QModelIndex & index);

	protected slots:
		/// Updates the page in case the page tree is affected
		virtual void updateSource(NVBDataSource * newobj, NVBDataSource * oldobj);
	};

#endif
