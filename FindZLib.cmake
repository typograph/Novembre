# - Find zlib
# Find the native ZLIB includes and library
#
#  ZLIB_INCLUDE_DIR - where to find zlib.h, etc.
#  ZLIB_LIBRARIES   - List of libraries when using zlib.
#  ZLIB_FOUND       - True if zlib found.

# Next line checks to see if we have already found zlib.
IF (ZLIB_INCLUDE_DIR)
   # Already in cache, be silent
# if zlib was already found then basically turn OFF debug statements
   SET(ZLIB_FIND_QUIETLY TRUE)
ENDIF (ZLIB_INCLUDE_DIR)

# Find a path that has the file zlib.h in it and put that path into
# the variable 'ZLIB_INCLUDE_DIR'  This will by default search
# all the paths generated by the the following variables:
#-- CMAKE_PREFIX_PATH:
#-- CMAKE_INCLUDE_PATH:
#-- CMAKE_FRAMEWORK_PATH:
#-- The standard system environment variables PATH and INCLUDE
#-- CMAKE_SYSTEM_PREFIX_PATH
#-- CMAKE_SYSTEM_INCLUDE_PATH
#-- CMAKE_SYSTEM_FRAMEWORK_PATH
FIND_PATH(ZLIB_INCLUDE_DIR zlib.h)

# Create a variable to hold the various names that zlib is called on
# the various systems
SET(ZLIB_NAMES z zlib zdll)

# This call works just like the FIND_PATH call except we are giving
# the FIND_LIBRARY command a list of possible names to find in each path
# listed above. If the library is found then the path to the library
# is put into the ZLIB_LIBRARY variable.
FIND_LIBRARY(ZLIB_LIBRARY NAMES ${ZLIB_NAMES} )

# handle the QUIETLY and REQUIRED arguments and set ZLIB_FOUND to TRUE  
# if all listed variables are TRUE
INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(ZLIB DEFAULT_MSG ZLIB_LIBRARY ZLIB_INCLUDE_DIR)

# If we successfully found the zlib library then add the library to the
# ZLIB_LIBRARIES cmake variable otherwise set ZLIB_LIBRARIES to nothing.
IF(ZLIB_FOUND)
   SET( ZLIB_LIBRARIES ${ZLIB_LIBRARY} )
ELSE(ZLIB_FOUND)
   SET( ZLIB_LIBRARIES )
ENDIF(ZLIB_FOUND)

# Lastly make it so that the ZLIB_LIBRARY and ZLIB_INCLUDE_DIR variables
# only show up under the advanced options in the gui cmake applications.
MARK_AS_ADVANCED( ZLIB_LIBRARY ZLIB_INCLUDE_DIR )
